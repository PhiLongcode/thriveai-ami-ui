
import { useState, useRef, useEffect } from "react";
import { toast } from "@/components/ui/use-toast";
import { Message, AmiMood } from "@/types/chat";
import { generateAmiResponse, handleBreathingExercise } from "@/utils/chatUtils";
import { useInactivity } from "@/hooks/useInactivity";

export function useChat() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      type: "ami",
      text: "Xin ch√†o! M√¨nh l√† Ami. B·∫°n c·∫£m th·∫•y th·∫ø n√†o h√¥m nay?",
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState("");
  const [amiMood, setAmiMood] = useState<AmiMood>("happy");
  const [isRecording, setIsRecording] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Suggested questions
  const suggestedQuestions = [
    "B·∫°n ƒëang c·∫£m th·∫•y th·∫ø n√†o?",
    "B·∫°n c√≥ mu·ªën th∆∞ gi√£n kh√¥ng?",
    "Ch√∫ng ta c√≥ th·ªÉ l√†m g√¨ ƒë·ªÉ gi√∫p b·∫°n c·∫£m th·∫•y t·ªët h∆°n?",
    "B·∫°n c√≥ th·ªÉ k·ªÉ chuy·ªán vui kh√¥ng?",
    "H√¥m nay t√¥i c·∫£m th·∫•y kh√¥ng ·ªïn",
  ];

  // Handle inactivity
  const handleInactiveMessage = (amiMessage: Message, mood: AmiMood) => {
    setMessages(prev => [...prev, amiMessage]);
    setAmiMood(mood);
  };

  const { setupInactivityTimer } = useInactivity({
    isEnabled: true,
    onInactiveMessage: handleInactiveMessage
  });

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSendMessage = () => {
    if (!inputText.trim()) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      text: inputText,
      timestamp: new Date(),
    };
    
    setMessages([...messages, userMessage]);
    setInputText("");
    
    // Simulate Ami thinking
    setAmiMood("thinking");
    setIsTyping(true);
    
    // Simulate Ami response after a delay
    setTimeout(() => {
      const { responseText, newMood, showToast } = generateAmiResponse(inputText);
      
      const amiMessage: Message = {
        id: Date.now().toString(),
        type: "ami",
        text: responseText,
        timestamp: new Date(),
      };
      
      setIsTyping(false);
      setAmiMood(newMood);
      
      // Simulate Ami speaking
      setIsSpeaking(true);
      setMessages(prev => [...prev, amiMessage]);
      
      // Show toast if needed
      if (showToast) {
        showToast();
      }
      
      // Send a positive image for sad users
      if (newMood === "neutral") {
        setTimeout(() => {
          const encouragementMessage: Message = {
            id: Date.now().toString(),
            type: "ami",
            text: "ƒê√¢y l√† h√¨nh ·∫£nh c√≥ th·ªÉ gi√∫p b·∫°n c·∫£m th·∫•y t·ªët h∆°n üåà",
            timestamp: new Date(),
          };
          
          setMessages(prev => [...prev, encouragementMessage]);
        }, 3000);
      }
      
      // Stop speaking after a delay based on message length
      setTimeout(() => {
        setIsSpeaking(false);
      }, responseText.length * 50);
      
    }, 1500);
  };

  const handleToggleRecording = () => {
    if (isRecording) {
      setIsRecording(false);
      // In a real app, this would process the recording and convert to text
      toast({
        title: "Voice-to-Text",
        description: "ƒê√£ chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n"
      });
      // Simulate voice to text result
      setInputText("H√¥m nay t√¥i c·∫£m th·∫•y c√≥ ch√∫t m·ªát m·ªèi, kh√¥ng bi·∫øt l√†m sao ƒë·ªÉ c·∫£m th·∫•y t·ªët h∆°n");
    } else {
      setIsRecording(true);
      toast({
        title: "ƒêang ghi √¢m",
        description: "H√£y n√≥i ƒëi·ªÅu b·∫°n mu·ªën chia s·∫ª...",
      });
    }
  };

  const handleSuggestedQuestion = (question: string) => {
    setInputText(question);
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };

  return {
    messages,
    inputText,
    setInputText,
    amiMood,
    isRecording,
    isTyping,
    isSpeaking,
    setIsSpeaking,
    suggestedQuestions,
    messagesEndRef,
    inputRef,
    handleSendMessage,
    handleToggleRecording,
    handleSuggestedQuestion,
    setupInactivityTimer,
  };
}
