import { useState, useRef, useEffect } from "react";
import { toast } from "@/components/ui/use-toast";
import { Message, AmiMood } from "@/types/chat";
import { useInactivity } from "@/hooks/useInactivity";
import { GoogleGenerativeAI } from "@google/generative-ai";

export function useChat() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      type: "ami",
      text: "Xin ch√†o! M√¨nh l√† Ami, m·ªôt chuy√™n gia t∆∞ v·∫•n t√¢m l√Ω. B·∫°n ƒëang c·∫£m th·∫•y th·∫ø n√†o h√¥m nay? H√£y chia s·∫ª v·ªõi m√¨nh nh√©!",
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState("");
  const [amiMood, setAmiMood] = useState<AmiMood>("happy");
  const [isRecording, setIsRecording] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Suggested questions (ch·ªâ li√™n quan ƒë·∫øn t√¢m l√Ω)
  const suggestedQuestions = [
    "B·∫°n ƒëang c·∫£m th·∫•y th·∫ø n√†o h√¥m nay?",
    "C√≥ ƒëi·ªÅu g√¨ ƒëang khi·∫øn b·∫°n trƒÉn tr·ªü kh√¥ng?",
    "B·∫°n mu·ªën chia s·∫ª g√¨ v·ªÅ c·∫£m x√∫c c·ªßa m√¨nh?",
    "H√¥m nay b·∫°n ƒë√£ tr·∫£i qua ƒëi·ªÅu g√¨ kh√≥ khƒÉn ch∆∞a?",
  ];

  // Handle inactivity
  const handleInactiveMessage = (amiMessage: Message, mood: AmiMood) => {
    setMessages(prev => [...prev, amiMessage]);
    setAmiMood(mood);
  };

  const { setupInactivityTimer } = useInactivity({
    isEnabled: true,
    onInactiveMessage: handleInactiveMessage
  });

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Kh·ªüi t·∫°o Gemini client
  const genAI = new GoogleGenerativeAI('AIzaSyBZ9z29qG2dlFcGFAD-4Ds8Rt_wMM-OZ0U');
  const model = genAI.getGenerativeModel({ model: 'models/gemini-1.5-flash' });

  const handleSendMessage = () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      text: inputText,
      timestamp: new Date(),
    };
    
    setMessages([...messages, userMessage]);
    setInputText("");
    setAmiMood("thinking");
    setIsTyping(true);

    setTimeout(async () => {
      try {
        const prompt = `
          B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n t√¢m l√Ω chuy√™n nghi·ªáp. H√£y tr·∫£ l·ªùi v·ªõi phong c√°ch th√¢n thi·ªán v√† ƒë·ªìng c·∫£m.

          Quy t·∫Øc ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi:
          1. B·∫Øt ƒë·∫ßu v·ªõi emoji ph√π h·ª£p v√† l·ªùi ch√†o ng·∫Øn g·ªçn, th√¢n thi·ªán
          2. Chia n·ªôi dung th√†nh c√°c ƒëo·∫°n ng·∫Øn (2-3 d√≤ng)
          3. M·ªói ƒëo·∫°n c√°ch nhau b·∫±ng 1 d√≤ng tr·ªëng
          4. V·ªõi danh s√°ch:
             ‚Ä¢ Th·ª•t l·ªÅ 3 kho·∫£ng tr·∫Øng
             ‚Ä¢ M·ªói ƒëi·ªÉm b·∫Øt ƒë·∫ßu b·∫±ng emoji th√≠ch h·ª£p
             ‚Ä¢ C√°c ƒëi·ªÉm c√°ch nhau 1 d√≤ng
          5. V·ªõi l·ªùi khuy√™n:
             ‚Ä¢ ƒê√°nh s·ªë th·ª© t·ª± r√µ r√†ng
             ‚Ä¢ M·ªói b∆∞·ªõc c√≥ emoji ri√™ng
             ‚Ä¢ Gi·∫£i th√≠ch ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu
          6. K·∫øt th√∫c b·∫±ng:
             ‚Ä¢ C√¢u ƒë·ªông vi√™n ng·∫Øn g·ªçn
             ‚Ä¢ Emoji t√≠ch c·ª±c
             ‚Ä¢ L·ªùi ch√†o th√¢n thi·ªán

          N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch·ªß ƒë·ªÅ kh√°c:
          "M√¨nh l√† chuy√™n gia t∆∞ v·∫•n t√¢m l√Ω, n√™n m√¨nh ch·ªâ c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c v·∫•n ƒë·ªÅ v·ªÅ c·∫£m x√∫c v√† tinh th·∫ßn.

          B·∫°n ƒëang c·∫£m th·∫•y th·∫ø n√†o, m√¨nh c√≥ th·ªÉ h·ªó tr·ª£ g√¨ cho b·∫°n? ü§ó"

          Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng: "${inputText}"
        `;
        
        const result = await model.generateContent(prompt);
        const response = await result.response;
        let responseText = response.text();

        // C·∫£i thi·ªán format vƒÉn b·∫£n
        responseText = responseText
          // X·ª≠ l√Ω emoji v√† d·∫•u c√¢u
          .replace(/([\u{1F300}-\u{1F9FF}])/gu, '\n$1') // T√°ch emoji ra d√≤ng m·ªõi
          .replace(/([.!?])\s*/g, '$1\n\n') // Th√™m d√≤ng tr·ªëng sau d·∫•u c√¢u
          .replace(/‚Ä¢/g, '\n\n   ‚Ä¢ ') // ƒê·ªãnh d·∫°ng bullet points v·ªõi th·ª•t l·ªÅ
          .replace(/(\d+\.)/g, '\n\n$1') // ƒê·ªãnh d·∫°ng s·ªë th·ª© t·ª±
          .replace(/:\s*/g, ':\n') // Xu·ªëng d√≤ng sau d·∫•u hai ch·∫•m
          .replace(/\n{3,}/g, '\n\n') // Chu·∫©n h√≥a kho·∫£ng tr·ªëng
          .replace(/^\s+|\s+$/gm, '') // X√≥a kho·∫£ng tr·∫Øng th·ª´a
          .replace(/(?<=\n)(\s*[-‚Ä¢])/g, '   $1') // Th·ª•t l·ªÅ cho danh s√°ch
          .trim();

        // Th√™m kho·∫£ng c√°ch cho c√°c ƒëo·∫°n vƒÉn
        responseText = responseText
          .split('\n')
          .filter(line => line.trim() !== '')
          .join('\n\n');

        const amiMessage: Message = {
          id: Date.now().toString(),
          type: "ami",
          text: responseText,
          timestamp: new Date(),
        };

        setIsTyping(false);
        setAmiMood("happy");
        setIsSpeaking(true);
        setMessages(prev => [...prev, amiMessage]);

        setTimeout(() => {
          setIsSpeaking(false);
        }, Math.min(responseText.length * 40, 6000)); // Reduced max duration to 6 seconds

      } catch (error) {
        console.error("API Error:", error);
        setIsTyping(false);
        setAmiMood("sad");
        toast({
          title: "L·ªói k·∫øt n·ªëi",
          description: "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i!",
        });
      }
    }, 1500);
  };

  const handleToggleRecording = () => {
    if (isRecording) {
      setIsRecording(false);
      toast({
        title: "Voice-to-Text",
        description: "ƒê√£ chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n"
      });
      // Gi·∫£ l·∫≠p k·∫øt qu·∫£ voice-to-text v·ªõi n·ªôi dung t√¢m l√Ω
      setInputText("H√¥m nay t√¥i c·∫£m th·∫•y h∆°i bu·ªìn v√† cƒÉng th·∫≥ng, kh√¥ng bi·∫øt l√†m sao ƒë·ªÉ gi·∫£i t·ªèa.");
    } else {
      setIsRecording(true);
      toast({
        title: "ƒêang ghi √¢m",
        description: "H√£y chia s·∫ª c·∫£m x√∫c c·ªßa b·∫°n...",
      });
    }
  };

  const handleSuggestedQuestion = (question: string) => {
    setInputText(question);
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };

  return {
    messages,
    inputText,
    setInputText,
    amiMood,
    isRecording,
    isTyping,
    isSpeaking,
    setIsSpeaking,
    suggestedQuestions,
    messagesEndRef,
    inputRef,
    handleSendMessage,
    handleToggleRecording,
    handleSuggestedQuestion,
    setupInactivityTimer,
  };
}