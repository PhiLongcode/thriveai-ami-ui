
import { Message, AmiMood } from "@/types/chat";
import { toast } from "@/components/ui/use-toast";
import { ToastAction } from "@/components/ui/toast";
import React from "react";

// Generate encouraging messages for inactive users
export const getEncouragementMessage = (): string => {
  const encouragementMessages = [
    "B·∫°n v·∫´n ·ªü ƒë√≥ ch·ª©? M√¨nh lu√¥n s·∫µn s√†ng tr√≤ chuy·ªán n·∫øu b·∫°n c·∫ßn.",
    "ƒê√£ m·ªôt l√∫c r·ªìi nh·ªâ? Hy v·ªçng b·∫°n v·∫´n ·ªïn. M√¨nh v·∫´n ·ªü ƒë√¢y n·∫øu b·∫°n mu·ªën chia s·∫ª ƒëi·ªÅu g√¨.",
    "H√¥m nay c·ªßa b·∫°n th·∫ø n√†o? M√¨nh mu·ªën bi·∫øt th√™m v·ªÅ c·∫£m nh·∫≠n c·ªßa b·∫°n.",
    "B·∫°n ƒëang l√†m g√¨ v·∫≠y? M√¨nh r·∫•t mu·ªën ƒë∆∞·ª£c tr√≤ chuy·ªán c√πng b·∫°n!",
  ];
  
  return encouragementMessages[Math.floor(Math.random() * encouragementMessages.length)];
};

// Process user input and generate appropriate Ami response
export const generateAmiResponse = (inputText: string): {
  responseText: string;
  newMood: AmiMood;
  showToast?: () => void;
} => {
  const lowerText = inputText.toLowerCase();
  const hasSadWords = lowerText.includes("bu·ªìn") || 
                      lowerText.includes("m·ªát") || 
                      lowerText.includes("ch√°n") ||
                      lowerText.includes("kh√≥ khƒÉn") ||
                      lowerText.includes("kh√¥ng ·ªïn");
  
  if (hasSadWords) {
    const showBreathingExercise = () => {
      setTimeout(() => {
        toast({
          title: "H√≠t th·ªü s√¢u",
          description: "B·∫°n c√≥ mu·ªën th·ª±c hi·ªán b√†i t·∫≠p th·ªü ƒë·ªÉ gi·∫£m cƒÉng th·∫≥ng?",
          action: React.createElement(ToastAction, {
            altText: "Th·ª≠ ngay",
            onClick: handleBreathingExercise,
            children: "Th·ª≠ ngay"
          })
        });
      }, 1000);
    };
    
    return {
      responseText: "M√¨nh hi·ªÉu c·∫£m gi√°c ƒë√≥. H√£y chia s·∫ª th√™m ƒë·ªÉ m√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t·ªët h∆°n. B·∫°n c√≥ mu·ªën th·ª≠ m·ªôt s·ªë b√†i t·∫≠p th·ªü ƒë·ªÉ th∆∞ gi√£n kh√¥ng? üòä",
      newMood: "neutral",
      showToast: showBreathingExercise
    };
  } else if (lowerText.includes("chuy√™n gia") || lowerText.includes("t∆∞ v·∫•n") || lowerText.includes("gi√∫p ƒë·ª°")) {
    const showExpertConnect = () => {
      setTimeout(() => {
        toast({
          title: "K·∫øt n·ªëi chuy√™n gia",
          description: "B·∫°n c√≥ mu·ªën g·ªçi video v·ªõi chuy√™n gia t√¢m l√Ω?",
          action: React.createElement(ToastAction, {
            altText: "G·ªçi ngay",
            onClick: () => window.location.href = "/video-call",
            children: "G·ªçi ngay"
          })
        });
      }, 1000);
    };
    
    return {
      responseText: "B·∫°n mu·ªën k·∫øt n·ªëi v·ªõi chuy√™n gia t√¢m l√Ω? M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n k·∫øt n·ªëi ngay b√¢y gi·ªù n·∫øu b·∫°n mu·ªën. Ch·ªâ c·∫ßn nh·∫•n v√†o n√∫t 'G·ªçi chuy√™n gia' b√™n d∆∞·ªõi nh√©.",
      newMood: "excited",
      showToast: showExpertConnect
    };
  } else {
    return {
      responseText: "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! M√¨nh lu√¥n ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n. B·∫°n c√≥ ƒëi·ªÅu g√¨ kh√°c mu·ªën n√≥i v·ªõi m√¨nh kh√¥ng? üòä",
      newMood: "happy"
    };
  }
};

// Handle breathing exercise
export const handleBreathingExercise = () => {
  toast({
    title: "B√†i t·∫≠p h√≠t th·ªü",
    description: "H√≠t s√¢u trong 4 gi√¢y, gi·ªØ 4 gi√¢y, th·ªü ra trong 6 gi√¢y. L·∫∑p l·∫°i 5 l·∫ßn.",
    duration: 10000,
  });
};
